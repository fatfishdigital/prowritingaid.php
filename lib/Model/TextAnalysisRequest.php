<?php
/**
 * TextAnalysisRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AnalysisBackend
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TextAnalysisRequest Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TextAnalysisRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TextAnalysisRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'text' => 'string',
        'reports' => 'string[]',
        'style' => 'string',
        'language' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'text' => 'Text',
        'reports' => 'Reports',
        'style' => 'Style',
        'language' => 'Language'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'text' => 'setText',
        'reports' => 'setReports',
        'style' => 'setStyle',
        'language' => 'setLanguage'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'text' => 'getText',
        'reports' => 'getReports',
        'style' => 'getStyle',
        'language' => 'getLanguage'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STYLE_NOT_SET = 'NotSet';
    const STYLE_GENERAL = 'General';
    const STYLE_ACADEMIC = 'Academic';
    const STYLE_BUSINESS = 'Business';
    const STYLE_TECHNICAL = 'Technical';
    const STYLE_CREATIVE = 'Creative';
    const STYLE_CASUAL = 'Casual';
    const STYLE_WEB = 'Web';
    const LANGUAGE_EN_US = 'en_US';
    const LANGUAGE_EN_UK = 'en_UK';
    const LANGUAGE_EN = 'en';
    const LANGUAGE_ES = 'es';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStyleAllowableValues()
    {
        return [
            self::STYLE_NOT_SET,
            self::STYLE_GENERAL,
            self::STYLE_ACADEMIC,
            self::STYLE_BUSINESS,
            self::STYLE_TECHNICAL,
            self::STYLE_CREATIVE,
            self::STYLE_CASUAL,
            self::STYLE_WEB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_EN_US,
            self::LANGUAGE_EN_UK,
            self::LANGUAGE_EN,
            self::LANGUAGE_ES,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['reports'] = isset($data['reports']) ? $data['reports'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['text'] === null) {
            $invalid_properties[] = "'text' can't be null";
        }
        if ($this->container['reports'] === null) {
            $invalid_properties[] = "'reports' can't be null";
        }
        if ($this->container['style'] === null) {
            $invalid_properties[] = "'style' can't be null";
        }
        $allowed_values = array("NotSet", "General", "Academic", "Business", "Technical", "Creative", "Casual", "Web");
        if (!in_array($this->container['style'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'style', must be one of #{allowed_values}.";
        }

        if ($this->container['language'] === null) {
            $invalid_properties[] = "'language' can't be null";
        }
        $allowed_values = array("en_US", "en_UK", "en", "es");
        if (!in_array($this->container['language'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'language', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['text'] === null) {
            return false;
        }
        if ($this->container['reports'] === null) {
            return false;
        }
        if ($this->container['style'] === null) {
            return false;
        }
        $allowed_values = array("NotSet", "General", "Academic", "Business", "Technical", "Creative", "Casual", "Web");
        if (!in_array($this->container['style'], $allowed_values)) {
            return false;
        }
        if ($this->container['language'] === null) {
            return false;
        }
        $allowed_values = array("en_US", "en_UK", "en", "es");
        if (!in_array($this->container['language'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets reports
     * @return string[]
     */
    public function getReports()
    {
        return $this->container['reports'];
    }

    /**
     * Sets reports
     * @param string[] $reports
     * @return $this
     */
    public function setReports($reports)
    {
        $this->container['reports'] = $reports;

        return $this;
    }

    /**
     * Gets style
     * @return string
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     * @param string $style
     * @return $this
     */
    public function setStyle($style)
    {
        $allowed_values = array('NotSet', 'General', 'Academic', 'Business', 'Technical', 'Creative', 'Casual', 'Web');
        if (!in_array($style, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'style', must be one of 'NotSet', 'General', 'Academic', 'Business', 'Technical', 'Creative', 'Casual', 'Web'");
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowed_values = array('en_US', 'en_UK', 'en', 'es');
        if (!in_array($language, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'language', must be one of 'en_US', 'en_UK', 'en', 'es'");
        }
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


