<?php
/**
 * WordCloudRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AnalysisBackend
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * WordCloudRequest Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WordCloudRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'WordCloudRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'text' => 'string',
        'orientation' => 'string',
        'case_method' => 'string',
        'palette_name' => 'string',
        'maximum_word_count' => 'int',
        'remove_common_words' => 'bool',
        'font_name' => 'string',
        'width' => 'int',
        'height' => 'int',
        'only_sentiment_words' => 'bool',
        'style' => 'string',
        'language' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'text' => 'Text',
        'orientation' => 'Orientation',
        'case_method' => 'CaseMethod',
        'palette_name' => 'PaletteName',
        'maximum_word_count' => 'MaximumWordCount',
        'remove_common_words' => 'RemoveCommonWords',
        'font_name' => 'FontName',
        'width' => 'Width',
        'height' => 'Height',
        'only_sentiment_words' => 'OnlySentimentWords',
        'style' => 'Style',
        'language' => 'Language'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'text' => 'setText',
        'orientation' => 'setOrientation',
        'case_method' => 'setCaseMethod',
        'palette_name' => 'setPaletteName',
        'maximum_word_count' => 'setMaximumWordCount',
        'remove_common_words' => 'setRemoveCommonWords',
        'font_name' => 'setFontName',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'only_sentiment_words' => 'setOnlySentimentWords',
        'style' => 'setStyle',
        'language' => 'setLanguage'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'text' => 'getText',
        'orientation' => 'getOrientation',
        'case_method' => 'getCaseMethod',
        'palette_name' => 'getPaletteName',
        'maximum_word_count' => 'getMaximumWordCount',
        'remove_common_words' => 'getRemoveCommonWords',
        'font_name' => 'getFontName',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'only_sentiment_words' => 'getOnlySentimentWords',
        'style' => 'getStyle',
        'language' => 'getLanguage'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const ORIENTATION_HORIZONTAL = 'Horizontal';
    const ORIENTATION_MOSTLY_HORIZONTAL = 'MostlyHorizontal';
    const ORIENTATION_VERTICAL = 'Vertical';
    const ORIENTATION_MOSTLY_VERTICAL = 'MostlyVertical';
    const ORIENTATION_HALF_AND_HALF = 'HalfAndHalf';
    const ORIENTATION_EVERY_WHICH_WAY = 'EveryWhichWay';
    const CASE_METHOD_PRESERVE_CASE = 'PreserveCase';
    const CASE_METHOD_LOWERCASE = 'Lowercase';
    const CASE_METHOD_UPPERCASE = 'Uppercase';
    const CASE_METHOD_INTELLIGENT_CASE = 'IntelligentCase';
    const STYLE_NOT_SET = 'NotSet';
    const STYLE_GENERAL = 'General';
    const STYLE_ACADEMIC = 'Academic';
    const STYLE_BUSINESS = 'Business';
    const STYLE_TECHNICAL = 'Technical';
    const STYLE_CREATIVE = 'Creative';
    const STYLE_CASUAL = 'Casual';
    const STYLE_WEB = 'Web';
    const LANGUAGE_EN_US = 'en_US';
    const LANGUAGE_EN_UK = 'en_UK';
    const LANGUAGE_EN = 'en';
    const LANGUAGE_ES = 'es';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOrientationAllowableValues()
    {
        return [
            self::ORIENTATION_HORIZONTAL,
            self::ORIENTATION_MOSTLY_HORIZONTAL,
            self::ORIENTATION_VERTICAL,
            self::ORIENTATION_MOSTLY_VERTICAL,
            self::ORIENTATION_HALF_AND_HALF,
            self::ORIENTATION_EVERY_WHICH_WAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCaseMethodAllowableValues()
    {
        return [
            self::CASE_METHOD_PRESERVE_CASE,
            self::CASE_METHOD_LOWERCASE,
            self::CASE_METHOD_UPPERCASE,
            self::CASE_METHOD_INTELLIGENT_CASE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStyleAllowableValues()
    {
        return [
            self::STYLE_NOT_SET,
            self::STYLE_GENERAL,
            self::STYLE_ACADEMIC,
            self::STYLE_BUSINESS,
            self::STYLE_TECHNICAL,
            self::STYLE_CREATIVE,
            self::STYLE_CASUAL,
            self::STYLE_WEB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_EN_US,
            self::LANGUAGE_EN_UK,
            self::LANGUAGE_EN,
            self::LANGUAGE_ES,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['orientation'] = isset($data['orientation']) ? $data['orientation'] : null;
        $this->container['case_method'] = isset($data['case_method']) ? $data['case_method'] : null;
        $this->container['palette_name'] = isset($data['palette_name']) ? $data['palette_name'] : null;
        $this->container['maximum_word_count'] = isset($data['maximum_word_count']) ? $data['maximum_word_count'] : null;
        $this->container['remove_common_words'] = isset($data['remove_common_words']) ? $data['remove_common_words'] : null;
        $this->container['font_name'] = isset($data['font_name']) ? $data['font_name'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['only_sentiment_words'] = isset($data['only_sentiment_words']) ? $data['only_sentiment_words'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("Horizontal", "MostlyHorizontal", "Vertical", "MostlyVertical", "HalfAndHalf", "EveryWhichWay");
        if (!in_array($this->container['orientation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'orientation', must be one of #{allowed_values}.";
        }

        $allowed_values = array("PreserveCase", "Lowercase", "Uppercase", "IntelligentCase");
        if (!in_array($this->container['case_method'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'case_method', must be one of #{allowed_values}.";
        }

        if ($this->container['style'] === null) {
            $invalid_properties[] = "'style' can't be null";
        }
        $allowed_values = array("NotSet", "General", "Academic", "Business", "Technical", "Creative", "Casual", "Web");
        if (!in_array($this->container['style'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'style', must be one of #{allowed_values}.";
        }

        if ($this->container['language'] === null) {
            $invalid_properties[] = "'language' can't be null";
        }
        $allowed_values = array("en_US", "en_UK", "en", "es");
        if (!in_array($this->container['language'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'language', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("Horizontal", "MostlyHorizontal", "Vertical", "MostlyVertical", "HalfAndHalf", "EveryWhichWay");
        if (!in_array($this->container['orientation'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("PreserveCase", "Lowercase", "Uppercase", "IntelligentCase");
        if (!in_array($this->container['case_method'], $allowed_values)) {
            return false;
        }
        if ($this->container['style'] === null) {
            return false;
        }
        $allowed_values = array("NotSet", "General", "Academic", "Business", "Technical", "Creative", "Casual", "Web");
        if (!in_array($this->container['style'], $allowed_values)) {
            return false;
        }
        if ($this->container['language'] === null) {
            return false;
        }
        $allowed_values = array("en_US", "en_UK", "en", "es");
        if (!in_array($this->container['language'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets orientation
     * @return string
     */
    public function getOrientation()
    {
        return $this->container['orientation'];
    }

    /**
     * Sets orientation
     * @param string $orientation
     * @return $this
     */
    public function setOrientation($orientation)
    {
        $allowed_values = array('Horizontal', 'MostlyHorizontal', 'Vertical', 'MostlyVertical', 'HalfAndHalf', 'EveryWhichWay');
        if (!in_array($orientation, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'orientation', must be one of 'Horizontal', 'MostlyHorizontal', 'Vertical', 'MostlyVertical', 'HalfAndHalf', 'EveryWhichWay'");
        }
        $this->container['orientation'] = $orientation;

        return $this;
    }

    /**
     * Gets case_method
     * @return string
     */
    public function getCaseMethod()
    {
        return $this->container['case_method'];
    }

    /**
     * Sets case_method
     * @param string $case_method
     * @return $this
     */
    public function setCaseMethod($case_method)
    {
        $allowed_values = array('PreserveCase', 'Lowercase', 'Uppercase', 'IntelligentCase');
        if (!in_array($case_method, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'case_method', must be one of 'PreserveCase', 'Lowercase', 'Uppercase', 'IntelligentCase'");
        }
        $this->container['case_method'] = $case_method;

        return $this;
    }

    /**
     * Gets palette_name
     * @return string
     */
    public function getPaletteName()
    {
        return $this->container['palette_name'];
    }

    /**
     * Sets palette_name
     * @param string $palette_name
     * @return $this
     */
    public function setPaletteName($palette_name)
    {
        $this->container['palette_name'] = $palette_name;

        return $this;
    }

    /**
     * Gets maximum_word_count
     * @return int
     */
    public function getMaximumWordCount()
    {
        return $this->container['maximum_word_count'];
    }

    /**
     * Sets maximum_word_count
     * @param int $maximum_word_count
     * @return $this
     */
    public function setMaximumWordCount($maximum_word_count)
    {
        $this->container['maximum_word_count'] = $maximum_word_count;

        return $this;
    }

    /**
     * Gets remove_common_words
     * @return bool
     */
    public function getRemoveCommonWords()
    {
        return $this->container['remove_common_words'];
    }

    /**
     * Sets remove_common_words
     * @param bool $remove_common_words
     * @return $this
     */
    public function setRemoveCommonWords($remove_common_words)
    {
        $this->container['remove_common_words'] = $remove_common_words;

        return $this;
    }

    /**
     * Gets font_name
     * @return string
     */
    public function getFontName()
    {
        return $this->container['font_name'];
    }

    /**
     * Sets font_name
     * @param string $font_name
     * @return $this
     */
    public function setFontName($font_name)
    {
        $this->container['font_name'] = $font_name;

        return $this;
    }

    /**
     * Gets width
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param int $width
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param int $height
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets only_sentiment_words
     * @return bool
     */
    public function getOnlySentimentWords()
    {
        return $this->container['only_sentiment_words'];
    }

    /**
     * Sets only_sentiment_words
     * @param bool $only_sentiment_words
     * @return $this
     */
    public function setOnlySentimentWords($only_sentiment_words)
    {
        $this->container['only_sentiment_words'] = $only_sentiment_words;

        return $this;
    }

    /**
     * Gets style
     * @return string
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     * @param string $style
     * @return $this
     */
    public function setStyle($style)
    {
        $allowed_values = array('NotSet', 'General', 'Academic', 'Business', 'Technical', 'Creative', 'Casual', 'Web');
        if (!in_array($style, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'style', must be one of 'NotSet', 'General', 'Academic', 'Business', 'Technical', 'Creative', 'Casual', 'Web'");
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowed_values = array('en_US', 'en_UK', 'en', 'es');
        if (!in_array($language, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'language', must be one of 'en_US', 'en_UK', 'en', 'es'");
        }
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


