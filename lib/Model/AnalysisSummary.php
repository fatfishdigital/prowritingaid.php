<?php
/**
 * AnalysisSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AnalysisBackend
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AnalysisSummary Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AnalysisSummary implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AnalysisSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'report_display_name' => 'string',
        'report_name' => 'string',
        'summary_items' => '\Swagger\Client\Model\AnalysisSummaryItem[]',
        'number_of_issues' => 'int',
        'report_description' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'report_display_name' => 'ReportDisplayName',
        'report_name' => 'ReportName',
        'summary_items' => 'SummaryItems',
        'number_of_issues' => 'NumberOfIssues',
        'report_description' => 'ReportDescription'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'report_display_name' => 'setReportDisplayName',
        'report_name' => 'setReportName',
        'summary_items' => 'setSummaryItems',
        'number_of_issues' => 'setNumberOfIssues',
        'report_description' => 'setReportDescription'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'report_display_name' => 'getReportDisplayName',
        'report_name' => 'getReportName',
        'summary_items' => 'getSummaryItems',
        'number_of_issues' => 'getNumberOfIssues',
        'report_description' => 'getReportDescription'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['report_display_name'] = isset($data['report_display_name']) ? $data['report_display_name'] : null;
        $this->container['report_name'] = isset($data['report_name']) ? $data['report_name'] : null;
        $this->container['summary_items'] = isset($data['summary_items']) ? $data['summary_items'] : null;
        $this->container['number_of_issues'] = isset($data['number_of_issues']) ? $data['number_of_issues'] : null;
        $this->container['report_description'] = isset($data['report_description']) ? $data['report_description'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets report_display_name
     * @return string
     */
    public function getReportDisplayName()
    {
        return $this->container['report_display_name'];
    }

    /**
     * Sets report_display_name
     * @param string $report_display_name
     * @return $this
     */
    public function setReportDisplayName($report_display_name)
    {
        $this->container['report_display_name'] = $report_display_name;

        return $this;
    }

    /**
     * Gets report_name
     * @return string
     */
    public function getReportName()
    {
        return $this->container['report_name'];
    }

    /**
     * Sets report_name
     * @param string $report_name
     * @return $this
     */
    public function setReportName($report_name)
    {
        $this->container['report_name'] = $report_name;

        return $this;
    }

    /**
     * Gets summary_items
     * @return \Swagger\Client\Model\AnalysisSummaryItem[]
     */
    public function getSummaryItems()
    {
        return $this->container['summary_items'];
    }

    /**
     * Sets summary_items
     * @param \Swagger\Client\Model\AnalysisSummaryItem[] $summary_items
     * @return $this
     */
    public function setSummaryItems($summary_items)
    {
        $this->container['summary_items'] = $summary_items;

        return $this;
    }

    /**
     * Gets number_of_issues
     * @return int
     */
    public function getNumberOfIssues()
    {
        return $this->container['number_of_issues'];
    }

    /**
     * Sets number_of_issues
     * @param int $number_of_issues
     * @return $this
     */
    public function setNumberOfIssues($number_of_issues)
    {
        $this->container['number_of_issues'] = $number_of_issues;

        return $this;
    }

    /**
     * Gets report_description
     * @return string
     */
    public function getReportDescription()
    {
        return $this->container['report_description'];
    }

    /**
     * Sets report_description
     * @param string $report_description
     * @return $this
     */
    public function setReportDescription($report_description)
    {
        $this->container['report_description'] = $report_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


