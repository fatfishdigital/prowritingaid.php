<?php
/**
 * AnalysisSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProWritingAid.API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AnalysisSettings Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AnalysisSettings implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AnalysisSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'shortest_average_sentence_length' => 'int',
        'longest_average_sentence_length' => 'int',
        'longest_individual_sentence' => 'int',
        'highest_passive_index' => 'int',
        'max_glue_index' => 'int',
        'min_sentence_variety' => 'int',
        'highest_pronoun_percentage' => 'double',
        'lowest_pronoun_percentage' => 'double',
        'highest_academic_pronoun_percentage' => 'double',
        'highest_initial_pronoun_percentage' => 'double',
        'lowest_initial_pronoun_percentage' => 'double',
        'lowest_we_we_score' => 'double',
        'longest_average_paragraph_length' => 'double'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'shortest_average_sentence_length' => 'ShortestAverageSentenceLength',
        'longest_average_sentence_length' => 'LongestAverageSentenceLength',
        'longest_individual_sentence' => 'LongestIndividualSentence',
        'highest_passive_index' => 'HighestPassiveIndex',
        'max_glue_index' => 'MaxGlueIndex',
        'min_sentence_variety' => 'MinSentenceVariety',
        'highest_pronoun_percentage' => 'HighestPronounPercentage',
        'lowest_pronoun_percentage' => 'LowestPronounPercentage',
        'highest_academic_pronoun_percentage' => 'HighestAcademicPronounPercentage',
        'highest_initial_pronoun_percentage' => 'HighestInitialPronounPercentage',
        'lowest_initial_pronoun_percentage' => 'LowestInitialPronounPercentage',
        'lowest_we_we_score' => 'LowestWeWeScore',
        'longest_average_paragraph_length' => 'LongestAverageParagraphLength'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'shortest_average_sentence_length' => 'setShortestAverageSentenceLength',
        'longest_average_sentence_length' => 'setLongestAverageSentenceLength',
        'longest_individual_sentence' => 'setLongestIndividualSentence',
        'highest_passive_index' => 'setHighestPassiveIndex',
        'max_glue_index' => 'setMaxGlueIndex',
        'min_sentence_variety' => 'setMinSentenceVariety',
        'highest_pronoun_percentage' => 'setHighestPronounPercentage',
        'lowest_pronoun_percentage' => 'setLowestPronounPercentage',
        'highest_academic_pronoun_percentage' => 'setHighestAcademicPronounPercentage',
        'highest_initial_pronoun_percentage' => 'setHighestInitialPronounPercentage',
        'lowest_initial_pronoun_percentage' => 'setLowestInitialPronounPercentage',
        'lowest_we_we_score' => 'setLowestWeWeScore',
        'longest_average_paragraph_length' => 'setLongestAverageParagraphLength'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'shortest_average_sentence_length' => 'getShortestAverageSentenceLength',
        'longest_average_sentence_length' => 'getLongestAverageSentenceLength',
        'longest_individual_sentence' => 'getLongestIndividualSentence',
        'highest_passive_index' => 'getHighestPassiveIndex',
        'max_glue_index' => 'getMaxGlueIndex',
        'min_sentence_variety' => 'getMinSentenceVariety',
        'highest_pronoun_percentage' => 'getHighestPronounPercentage',
        'lowest_pronoun_percentage' => 'getLowestPronounPercentage',
        'highest_academic_pronoun_percentage' => 'getHighestAcademicPronounPercentage',
        'highest_initial_pronoun_percentage' => 'getHighestInitialPronounPercentage',
        'lowest_initial_pronoun_percentage' => 'getLowestInitialPronounPercentage',
        'lowest_we_we_score' => 'getLowestWeWeScore',
        'longest_average_paragraph_length' => 'getLongestAverageParagraphLength'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shortest_average_sentence_length'] = isset($data['shortest_average_sentence_length']) ? $data['shortest_average_sentence_length'] : null;
        $this->container['longest_average_sentence_length'] = isset($data['longest_average_sentence_length']) ? $data['longest_average_sentence_length'] : null;
        $this->container['longest_individual_sentence'] = isset($data['longest_individual_sentence']) ? $data['longest_individual_sentence'] : null;
        $this->container['highest_passive_index'] = isset($data['highest_passive_index']) ? $data['highest_passive_index'] : null;
        $this->container['max_glue_index'] = isset($data['max_glue_index']) ? $data['max_glue_index'] : null;
        $this->container['min_sentence_variety'] = isset($data['min_sentence_variety']) ? $data['min_sentence_variety'] : null;
        $this->container['highest_pronoun_percentage'] = isset($data['highest_pronoun_percentage']) ? $data['highest_pronoun_percentage'] : null;
        $this->container['lowest_pronoun_percentage'] = isset($data['lowest_pronoun_percentage']) ? $data['lowest_pronoun_percentage'] : null;
        $this->container['highest_academic_pronoun_percentage'] = isset($data['highest_academic_pronoun_percentage']) ? $data['highest_academic_pronoun_percentage'] : null;
        $this->container['highest_initial_pronoun_percentage'] = isset($data['highest_initial_pronoun_percentage']) ? $data['highest_initial_pronoun_percentage'] : null;
        $this->container['lowest_initial_pronoun_percentage'] = isset($data['lowest_initial_pronoun_percentage']) ? $data['lowest_initial_pronoun_percentage'] : null;
        $this->container['lowest_we_we_score'] = isset($data['lowest_we_we_score']) ? $data['lowest_we_we_score'] : null;
        $this->container['longest_average_paragraph_length'] = isset($data['longest_average_paragraph_length']) ? $data['longest_average_paragraph_length'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets shortest_average_sentence_length
     * @return int
     */
    public function getShortestAverageSentenceLength()
    {
        return $this->container['shortest_average_sentence_length'];
    }

    /**
     * Sets shortest_average_sentence_length
     * @param int $shortest_average_sentence_length <remarks>Default is 11</remarks>
     * @return $this
     */
    public function setShortestAverageSentenceLength($shortest_average_sentence_length)
    {
        $this->container['shortest_average_sentence_length'] = $shortest_average_sentence_length;

        return $this;
    }

    /**
     * Gets longest_average_sentence_length
     * @return int
     */
    public function getLongestAverageSentenceLength()
    {
        return $this->container['longest_average_sentence_length'];
    }

    /**
     * Sets longest_average_sentence_length
     * @param int $longest_average_sentence_length <remarks>Default is 18</remarks>
     * @return $this
     */
    public function setLongestAverageSentenceLength($longest_average_sentence_length)
    {
        $this->container['longest_average_sentence_length'] = $longest_average_sentence_length;

        return $this;
    }

    /**
     * Gets longest_individual_sentence
     * @return int
     */
    public function getLongestIndividualSentence()
    {
        return $this->container['longest_individual_sentence'];
    }

    /**
     * Sets longest_individual_sentence
     * @param int $longest_individual_sentence <remarks>Default is 30</remarks>
     * @return $this
     */
    public function setLongestIndividualSentence($longest_individual_sentence)
    {
        $this->container['longest_individual_sentence'] = $longest_individual_sentence;

        return $this;
    }

    /**
     * Gets highest_passive_index
     * @return int
     */
    public function getHighestPassiveIndex()
    {
        return $this->container['highest_passive_index'];
    }

    /**
     * Sets highest_passive_index
     * @param int $highest_passive_index <remarks>Default is 25</remarks>
     * @return $this
     */
    public function setHighestPassiveIndex($highest_passive_index)
    {
        $this->container['highest_passive_index'] = $highest_passive_index;

        return $this;
    }

    /**
     * Gets max_glue_index
     * @return int
     */
    public function getMaxGlueIndex()
    {
        return $this->container['max_glue_index'];
    }

    /**
     * Sets max_glue_index
     * @param int $max_glue_index <remarks>Default is 40</remarks>
     * @return $this
     */
    public function setMaxGlueIndex($max_glue_index)
    {
        $this->container['max_glue_index'] = $max_glue_index;

        return $this;
    }

    /**
     * Gets min_sentence_variety
     * @return int
     */
    public function getMinSentenceVariety()
    {
        return $this->container['min_sentence_variety'];
    }

    /**
     * Sets min_sentence_variety
     * @param int $min_sentence_variety <remarks>Default is 3</remarks>
     * @return $this
     */
    public function setMinSentenceVariety($min_sentence_variety)
    {
        $this->container['min_sentence_variety'] = $min_sentence_variety;

        return $this;
    }

    /**
     * Gets highest_pronoun_percentage
     * @return double
     */
    public function getHighestPronounPercentage()
    {
        return $this->container['highest_pronoun_percentage'];
    }

    /**
     * Sets highest_pronoun_percentage
     * @param double $highest_pronoun_percentage <remarks>Default is 15</remarks>
     * @return $this
     */
    public function setHighestPronounPercentage($highest_pronoun_percentage)
    {
        $this->container['highest_pronoun_percentage'] = $highest_pronoun_percentage;

        return $this;
    }

    /**
     * Gets lowest_pronoun_percentage
     * @return double
     */
    public function getLowestPronounPercentage()
    {
        return $this->container['lowest_pronoun_percentage'];
    }

    /**
     * Sets lowest_pronoun_percentage
     * @param double $lowest_pronoun_percentage <remarks>Default is 4</remarks>
     * @return $this
     */
    public function setLowestPronounPercentage($lowest_pronoun_percentage)
    {
        $this->container['lowest_pronoun_percentage'] = $lowest_pronoun_percentage;

        return $this;
    }

    /**
     * Gets highest_academic_pronoun_percentage
     * @return double
     */
    public function getHighestAcademicPronounPercentage()
    {
        return $this->container['highest_academic_pronoun_percentage'];
    }

    /**
     * Sets highest_academic_pronoun_percentage
     * @param double $highest_academic_pronoun_percentage <remarks>Default is 2</remarks>
     * @return $this
     */
    public function setHighestAcademicPronounPercentage($highest_academic_pronoun_percentage)
    {
        $this->container['highest_academic_pronoun_percentage'] = $highest_academic_pronoun_percentage;

        return $this;
    }

    /**
     * Gets highest_initial_pronoun_percentage
     * @return double
     */
    public function getHighestInitialPronounPercentage()
    {
        return $this->container['highest_initial_pronoun_percentage'];
    }

    /**
     * Sets highest_initial_pronoun_percentage
     * @param double $highest_initial_pronoun_percentage <remarks>Default is 30</remarks>
     * @return $this
     */
    public function setHighestInitialPronounPercentage($highest_initial_pronoun_percentage)
    {
        $this->container['highest_initial_pronoun_percentage'] = $highest_initial_pronoun_percentage;

        return $this;
    }

    /**
     * Gets lowest_initial_pronoun_percentage
     * @return double
     */
    public function getLowestInitialPronounPercentage()
    {
        return $this->container['lowest_initial_pronoun_percentage'];
    }

    /**
     * Sets lowest_initial_pronoun_percentage
     * @param double $lowest_initial_pronoun_percentage <remarks>Default is 0</remarks>
     * @return $this
     */
    public function setLowestInitialPronounPercentage($lowest_initial_pronoun_percentage)
    {
        $this->container['lowest_initial_pronoun_percentage'] = $lowest_initial_pronoun_percentage;

        return $this;
    }

    /**
     * Gets lowest_we_we_score
     * @return double
     */
    public function getLowestWeWeScore()
    {
        return $this->container['lowest_we_we_score'];
    }

    /**
     * Sets lowest_we_we_score
     * @param double $lowest_we_we_score <remarks>Default is .6</remarks>
     * @return $this
     */
    public function setLowestWeWeScore($lowest_we_we_score)
    {
        $this->container['lowest_we_we_score'] = $lowest_we_we_score;

        return $this;
    }

    /**
     * Gets longest_average_paragraph_length
     * @return double
     */
    public function getLongestAverageParagraphLength()
    {
        return $this->container['longest_average_paragraph_length'];
    }

    /**
     * Sets longest_average_paragraph_length
     * @param double $longest_average_paragraph_length <remarks>Default is 6</remarks>
     * @return $this
     */
    public function setLongestAverageParagraphLength($longest_average_paragraph_length)
    {
        $this->container['longest_average_paragraph_length'] = $longest_average_paragraph_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


